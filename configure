#! /bin/bash

die () {
    echo -e >&2 "$@"
    exit 1
}

_done() {
  printf "...done\n\n"
}

backup() {
  src=$1
  dst=$2
  if [ -e $dst ]; then
    name="$dst-`date`-bak"
    echo "Saving old $dst as $name"
    mv "$dst" "$name"
  fi
  cp -R $src $dst
}

install() {
  echo "Starting installation..."
  echo "Initializing submodules"
  git submodule update --init --recursive
  _done

  echo "Downloading git autocomplete"
  curl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -o ~/.git-completion.bash

  echo "Setting gitignore global"
  git config --global core.excludesfile ~/.gitignore

  mkdir -p ~/.config

  echo "Copying vim, git, screen, and bash settings"
  backup vim/ ~/.vim
  backup vimrc ~/.vimrc
  backup gitignore ~/.gitignore
  backup tmux.conf ~/.tmux.conf
  backup bash_profile ~/.bash_profile
  backup bashrc ~/.bashrc

  echo "installing bin files"
  sudo cp bin/* /usr/local/bin

  _done
}

clean() {
  echo "Cleaing old files..."
  files="~/.vim ~/.vimrc ~/.gitignore ~/.tmux.conf ~/.bash_profile ~/.bashrc"
  for f in $files;
  do
    name=$f-*-bak
    echo "Removing $name"
    eval rm -rf $name
  done
}

pull() {
  echo "Pulling files from current environment..."
  files="~/.vimrc ~/.gitignore ~/.tmux.conf ~/.bash_profile ~/.bashrc"
  for f in $files;
  do
    echo "Copying $f to ${f:3}"
    eval cp -R $f ${f:3}
  done

  basedir=$(pwd)
  cd ~/.vim/bundle
  for f in $(ls .);
  do
    cd $f
    url=$(git remote get-url origin)
    cd $basedir
    git submodule add $url vim/bundle/$f
    cd ~/.vim/bundle
  done
  _done
}

usage() {
  echo "Usage: ./configure.sh [install|clean|pull]"
}

[ "$#" -eq 1 ] || die "`usage`\n1 argument required, $# provided"

if [ "$1"  == "install" ]; then
    install
elif [ "$1" ==  "clean" ]; then
    clean
elif [ "$1" ==  "pull" ]; then
    pull
else
  usage
fi
